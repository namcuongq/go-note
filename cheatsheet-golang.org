* Golang CheatSheet                                               :Languages:
:PROPERTIES:
:type:     language
:END:

** Golang Conversion
| Name                           | Comment                                                         |
|--------------------------------+-----------------------------------------------------------------|
| Convert string to int          | i, _ := strconv.ParseInt("12345", 10, 64)                       |
| Convert string to int          | i, err := strconv.Atoi("-42")                                   |
| Convert string to list         | L := strings.Split("hi,golang", "")                             |
| Convert string to []byte       | =[]byte("abcXX")=                                               |
| Convert string to byte         | =byte(str1[])=                                                  |
| Convert string to float32      | f, _ := strconv.ParseFloat("3.1415", 32)                        |
| Convert int to float32         | 0.5*float32(age)+7>= float32(age2)                              |
| Convert int to string          | s := strconv.Itoa(-42). Notice: not =string(-42)                |
| Convert rune to string         | =string(rune1)=                                                 |
| Convert string list to string  | =strings.Join(list, ", ")=                                      |
| Convert int list to string     | =fmt.Sprintf("%s", l)=                                          |
| Convert list to byte           | byteI := byte(65)                                               |
| Convert byte to int            | =int(byte('a'))=                                                |
| Convert byte to string         | =string(byte('a'))=                                             |
| Convert bytes to string        | =string([]byte("abcXX"))=                                       |
| Convert int32 to int32 Pointer | =func int32Ptr(i int32) *int32 { return &i }=                   |
| Convert string[] to string     | =strings.Join([]string{"a", "b"}, ",")=                         |
| Format string                  | =fmt.Sprintf("At %v, %s", e.When, e.What)=                      |
| Format string                  | =fmt.Printf("int: %d, float: %f, bool: %t\n", 123, 78.9, true)= |
** Golang Quality Improvement Tools
| Name              | Comment                                                                      |
|-------------------+------------------------------------------------------------------------------|
| [[https://github.com/securego/gosec][gosec]]             | Golang security checker, =gosec ./...=                                       |
| [[https://github.com/golangci/golangci-lint/tree/master/cmd/golangci-lint][golangci-lint]]     | lint check, =golint=                                                         |
| [[https://github.com/kisielk/errcheck][errcheck]]          | errcheck checks that you checked errors, =errcheck ./...=                    |
| [[https://github.com/go-delve/delve][delve]]             | Delve is a debugger for the Go programming language.                         |
| [[https://github.com/onsi/ginkgo/tree/master/ginkgo][ginkgo]]            | BDD Testing Framework for Go                                                 |
| [[https://github.com/golang/mock][mock]]              | GoMock is a mocking framework for Golang                                     |
| [[https://godoc.org/sigs.k8s.io/controller-runtime/pkg/envtest][envtest]]           | provides libraries for integration testing by starting a local control plane |
| [[https://github.com/jstemmer/go-junit-report/tree/master][go-junit-report]]   | Convert go test output to junit xml                                          |
| [[https://github.com/t-yuki/gocover-cobertura/tree/master][gocover-cobertura]] | go tool cover to XML (Cobertura) export tool                                 |
| [[https://github.com/wadey/gocovmerge/tree/master][gocovmerge]]        | Merge coverprofile results from multiple go cover runs                       |
** Golang Dependencies
| Name                                       | Comment                                                                          |
|--------------------------------------------+----------------------------------------------------------------------------------|
| [[https://godoc.org/golang.org/x/tools/cmd/goimports][goimports]]                                  | updates your Go import lines, adding missing ones and removing unreferenced ones |
| [[https://github.com/golang/dep/tree/master/cmd/dep][dep]]                                        | Go deps, now recommend =go modules=                                              |
| [[https://golang.github.io/dep/docs/installation.html][Install go dep]]                             | =go get -u github.com/golang/dep/cmd/dep=                                        |
| Go modules                                 | export GO111MODULE=on, =go mod download=                                         |
| initialize new module in current directory | =go mod init XXX=                                                                |
| download modules to local cache            | =go mod download=                                                                |
| make vendored copy of dependencies         | =go mod vendor=                                                                  |
| add missing and remove unused modules      | =go mod tidy=                                                                    |
| Reference                                  | [[https://blog.golang.org/using-go-modules][Link: Using Go Modules]]                                                           |

** Deep Dive Into Golang
- Go's original target was networked system infrastructure, what we now call cloud software
| Name                                              | Comment                                                                                        |
|---------------------------------------------------+------------------------------------------------------------------------------------------------|
| Garbage Colection                                 |                                                                                                |
| Golang goroutine                                  |                                                                                                |
| Golang return a tuple                             | =func dfs(root *TreeNode, max *float64) (sum int, cnt int)=, [[https://code.dennyzhang.com/maximum-average-subtree][Leetcode: Maximum Average Subtree]] |
| Use strings.Builder, instead of string            | [[https://code.dennyzhang.com/unique-email-addresses][Leetcode: Unique Email Addresses]]                                                               |
| Variable Conversion                               | =float64(x_int/y_int)= != =float64(x_int)/float64(y_int)=, [[https://code.dennyzhang.com/maximum-average-subtree][Leetcode: Maximum Average Subtree]]   |
| For a list of objects, pass by value or reference | =f(l []*TreeNode)= vs =f(l *[]*TreeNode)=, [[https://code.dennyzhang.com/lowest-common-ancestor-of-a-binary-tree][Leetcode: Lowest Common Ancestor of a Binary Tree]]   |

** Golang Errors
| Name                          | Comment                            |
|-------------------------------+------------------------------------|
| [[https://flaviocopes.com/golang-does-not-support-indexing/][... does not support indexing]] | =*variable[0]= -> =(*variable)[0]= |

** Golang Common
| Name                          | Comment                                         |
|-------------------------------+-------------------------------------------------|
| [[https://www.grailbox.com/2019/02/installing-go-1-12-on-macos-high-sierra/][Upgrade golang to 1.12 in mac]] | =brew upgrade go=, =go version=                 |
| Reference                     | [[https://golang.org/ref/spec][Link: The Go Programming Language Specification]] |

** Golang Code Structure & Common Algorithms
| Name                                | Comment                                          |
|-------------------------------------+--------------------------------------------------|
| Online Go Playgroud                 | https://play.golang.org/                         |
| One line if statement               | if a >= 1 { fmt.Print("yes") }                   |
| Declare variables with initializers | var ischecked, v, str  = false, 2, "yes!"        |
| goroutine                           | Define functions to run as distince subprocesses |
| switch                              | [[https://github.com/dennyzhang/cheatsheet-golang-A4/blob/master/code/example-switch.go][code/example-switch.go]]                           |
| queue                               | [[https://code.dennyzhang.com/number-of-recent-calls][Leetcode: Number of Recent Calls]]                 |
| bfs                                 | [[https://github.com/dennyzhang/cheatsheet-golang-A4/blob/master/code/tree-bfs.go][code/tree-bfs.go]]                                 |
| trie tree                           | [[https://github.com/dennyzhang/cheatsheet-golang-A4/blob/master/code/tree-trie.go][code/tree-trie.go]]                                |

** Syntax Sugar: From Python To Golang
| Name           | Python                                   | Golang                                           |
|----------------+------------------------------------------+--------------------------------------------------|
| sum slice      | =sum([1, 2, 3])=                         | sum := 0; for i := range nums { sum += nums[i] } |
| Get last item  | =nums[-1]=                               | nums[len(nums)-1]                                |
| For            | =for i in range(10):=                    | for i := 0; i < 10; i++                          |
| Loop list      | =for num in [1, 2]=                      | for num := range[]int{1, 2} { fmt.Print(num) }   |
| Loop string    | =for ch in str:=                         | for _, ch := range str { fmt.Print(ch) }         |
| Iterator       | =for num in nums:=                       | for _, num := range nums {fmt.Print(num)}        |
| While          | =while isOK:=                            | =for isOK=                                       |
| Check ch range | =ord(ch) in range(ord('a'), ord('z')+1)= | ch >='a' && ch <='z'                             |
| Get min        | =min(2, 6, 5)=                           |                                                  |
| Check is nil   | =root is None=                           | root == nil                                      |
| Reverse list   | =nums[::-1]=                             | Need to create your own function. Weird!         |
** Surprises In Golang
| Name                             | Comment                 |
|----------------------------------+-------------------------|
| [[https://github.com/golang/go/issues/448][Modulus returns negative numbers]] | In golang, -3 % 2 == -1 |
** Golang Array/List/Slice
| Name                                   | Comment                                        |
|----------------------------------------+------------------------------------------------|
| Make a array                           | var a [2]string; a[0]="hello"; a[1]="world"    |
| Create array with given values         | l := [6]int{2, 3, 7, 5, 11, 13}                |
| Create array with given values         | l := []string{"a", "c", "b", "d"}              |
| Create dynamically-sized arrays        | a := make([]int, 5)                            |
| Create dynamically-sized arrays        | a := make([]int, 1, 5) // 5 is capacity        |
| Sort string array                      | =sort.Strings(l); fmt.Print(l)=                |
| Sort int array                         | =sort.Ints(l)= //in-place change               |
| Golang sort one array by another array | [[https://code.dennyzhang.com/largest-values-from-labels][Leetcode: Largest Values From Labels]]           |
| [[https://stackoverflow.com/questions/37695209/golang-sort-slice-ascending-or-descending/40932847][Sort in descending order]]               | =sort.Sort(sort.Reverse(sort.IntSlice(keys)))= |
| Append item                            | l = append(l, "e")                             |
| Append items                           | l = append(l, "e", "b", "c")                   |
| Append item to head/prepend            | =l = append([]string{"a"}, l...)=              |
| Remove last item                       | =l = l[:len(l)-1]=                             |
| Remove item by index                   | =l = append(l[0:1], l[2:]...)=                 |
| Slices of a array                      | =var l2 = l[1:3]= // Notice: it's a reference  |
| Copy a list                            | b := make([]int, len(a)); copy(b, a)           |
| Join two lists                         | =l1 = append(l1, l2...)=                       |
| Use pointer of array list              | [[https://github.com/dennyzhang/cheatsheet-golang-A4/blob/master/code/pointer-array.go][code/pointer-array.go]]                          |
** Golang String
| Name                         | Comment                                                         |
|------------------------------+-----------------------------------------------------------------|
| Format string                | =fmt.Sprintf("At %v, %s", e.When, e.What)=                      |
| Format string                | =fmt.Printf("int: %d, float: %f, bool: %t\n", 123, 78.9, true)= |
| [[https://stackoverflow.com/questions/25637440/how-to-pad-a-number-with-zeros-when-printing][Padding zero]]                 | =fmt.Printf("%02d:%02d", 2, 10)=                                |
| Split string                 | =var L = strings.Split("hi,golang", ",")=                       |
| Replace string               | =var str2 = strings.Replace("hi,all", ",", ";", -1)=            |
| Replace string               | =strings.Replace("aaaa", "a", "b", 2)= //bbaa                   |
| Split string by separator    | =strings.Split(path, " ")=                                      |
| Count characters             | =strings.Count("test", "t")=                                    |
| Substring                    | =strings.Index("test", "e")=                                    |
| Join string                  | =strings.Join([]string{"a","b"}, "-")=                          |
| Repeat string                | =strings.Repeat("a", 2)= // aa                                  |
| Lower string                 | =strings.ToLower("TEST")=                                       |
| Trim whitespace in two sides | =strings.TrimSpace("\t Hello world!\n ")=                       |
| Trim trailing whitespace     | =strings.TrimRight("\t Hello world!\n ", "\n ")=                |
| Concact string               | =fmt.Sprintf("%s%s", str1, str2)=                               |
| Reference                    | [[https://golang.org/pkg/strings/][Link: package strings]]                                           |
** Golang Integer/Float
| Name                  | Comment                          |
|-----------------------+----------------------------------|
| Int max               | MaxInt32 = 1<<31 - 1 [[https://golang.org/pkg/math/][golang math]] |
| Int min               | MinInt32 = -1 << 31 [[https://golang.org/pkg/math/][golang math]]  |
| Pass int as reference | [[https://code.dennyzhang.com/binary-tree-longest-consecutive-sequence][sample code]]                      |
** Golang Env
| Name      | Comment                                                       |
|-----------+---------------------------------------------------------------|
| GOPATH    | It is called as the workspace directory for Go programs       |
| [[https://www.programming-books.io/essential/go/gopath-goroot-gobin-d6da4b8481f94757bae43be1fdfa9e73][GOROOT]]    | The location of your Go installation. No need to set any more |
| =go env=  | Show a full list of environment variables                     |
| Reference | [[https://www.programming-books.io/essential/go/gopath-goroot-gobin-d6da4b8481f94757bae43be1fdfa9e73][Link: GOPATH, GOROOT, GOBIN]]                                   |
** Golang Package management
| Name               | Comment                             |
|--------------------+-------------------------------------|
| go mod             | [[https://github.com/golang/go/wiki/Modules][Link: go modules]]                    |
| go get fix         | =GO111MODULE=off go get -fix ./...= |
| go mod replace url | go mod edit -replace...             |
** Golang Ascii
| Name                | Comment                                          |
|---------------------+--------------------------------------------------|
| get character ascii | =byte('0')=                                      |
| ascii offset        | =fmt.Println(string('B' + byte('a')-byte('A')))= |
** Golang Dict/Hashmap/Map
| Name                      | Comment                                                  |
|---------------------------+----------------------------------------------------------|
| Create dict               | =map[string]int{"a": 1, "b": 2}=                         |
| Create dict               | =make(map[string]int)=                                   |
| Check existence           | _, ok := m[k]                                            |
| Delete key                | =delete(m, "k1")=                                        |
| Create a map of lists     | m := make(map[string][]string)                           |
| Get keys of a map         | Loop the dictionary and append the key to a list         |
| Use (x, y) as hashmap key | m[[2]int{2, 2}] = true, [[https://github.com/dennyzhang/cheatsheet-golang-A4/blob/master/code/example-hashmap-arraykey.go][code/example-hashmap-arraykey.go]] |

** Golang Goroutines
| Name            | Comment                   |
|-----------------+---------------------------|
| Basic goroutine | [[https://github.com/dennyzhang/cheatsheet-golang-A4/blob/master/code/example-goroutine.go][code/example-goroutine.go]] |

** Golang Inteface
| Name                                                       | Comment                       |
|------------------------------------------------------------+-------------------------------|
| Hash map with both key and value dynamic                   | =map[interface{}]interface{}= |
| Define and use interface                                   | [[https://github.com/dennyzhang/cheatsheet-golang-A4/blob/master/code/example-interface.go][code/example-interface.go]]     |
| Convert map[interface {}]interface {} to map[string]string | [[https://github.com/dennyzhang/cheatsheet-golang-A4/blob/master/code/interface-conversion.go][code/interface-conversion.go]]  |
** Golang Files & Folders
| Name        | Comment                    |
|-------------+----------------------------|
| Read files  | [[https://github.com/dennyzhang/cheatsheet-golang-A4/blob/master/code/example-read-file.go][code/example-read-file.go]] |
| Write files | [[https://github.com/dennyzhang/cheatsheet-golang-A4/blob/master/code/example-write-file.go][code/example-write-file.go]] |
** Golang Math
| Name      | Comment                                     |
|-----------+---------------------------------------------|
| pow(2, 3) | =int(math.Pow(2, 3))= // Default is float64 |
| sqrt      | =math.Sqrt(100)=                            |
| [[https://gobyexample.com/random-numbers][Get rand]]  | =rand.Intn(100)=, =rand.Float64()=          |
** Golang Bit Operator & Math
| Name        | Comment                                     |
|-------------+---------------------------------------------|
| Shift left  | =fmt.Print(1 << 10)= // 1024                |
| Shift right | =fmt.Print(1024 >> 3)= // 128               |
** Golang BBD Testing
| Name                  | Summary                                                                   |
|-----------------------+---------------------------------------------------------------------------|
| ginkgo                | BDD Testing Framework for Go http://onsi.github.io/ginkgo/                |
| [[https://www.howtoinstall.co/en/ubuntu/xenial/golang-ginkgo-dev][Ubuntu install ginkgo]] | =apt-get install golang-ginkgo-dev=                                       |
| [[http://onsi.github.io/gomega][gomega]]                | Ginkgo's Preferred Matcher Library                                        |
| Add tags to tests     | =// +build availability=, =go test -v --tags=availability ./test/e2e/...= |
** Golang Misc
| Name                       | Comment                                       |
|----------------------------+-----------------------------------------------|
| [[https://gobyexample.com/timeouts][Golang sleep]]               | =time.Sleep(4* time.Second)=                  |
| Golang logging             | =import "log"=, =log.Print=, =log.Fatal(err)= |
| [[https://stackoverflow.com/questions/25927660/how-to-get-the-current-function-name][Golang print function name]] | =runtime.Callers=                             |
** More Resources
https://play.golang.org/

https://tour.golang.org/list

https://golang.org/doc/

https://github.com/a8m/go-lang-cheat-sheet
